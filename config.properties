
# Java command line options to launch the debuggee. The options includes -D and -classpath
argument.options=-classpath "\
.:\
/home/developer/Downloads/1/junit-example/junit-4.13.jar:\
/home/developer/Downloads/1/junit-example/hamcrest-core-1.3.jar:\
/home/developer/Downloads/1/junit-example"

# Debuggee main class
argument.main=org.junit.runner.JUnitCore CalculatorTest

# This parameter specify a thread for which the diagrams are built. You can select required thread by its creating order.
# You can find threads creating order in the thread graph built by threads.txt. threads.txt is created during the first
# run of the tool simultaneously with call_graph.data. This parameter value is formed from the createdByOrder value of
# the selected thread on the graph and its ancestors delimited by colon. For example, for the first thread created by the
# main thread this value will be "1,0". For the main thread the value is "0".
thread_creating_order=0

# The type name the debugging process is started from. This parameters is set in the pare with startup.from.method which
# specify the method to starting from. If you do not set this parameters the debugging process is started from the
# beginning of the thread.
startup.from.class=CalculatorTest
startup.from.method=void evaluatesExpression()

# The type name to finish debugging process. This parameters is set in the pare with startup.to.method which specify the
# method to finish at. if you do not set this parameters and set startup.from.class and startup.from.method parameters
# then debugging process is finished on exiting from method specified by startup.from.method. Otherwise debugging process
# is finished in the end of the thread.
startup.to.class=
startup.to.method=

# The depth of the sequence diagram. The "trimming" filter is applied to the dipper method calls.
filter_depth=5

# If you set this parameter to "1", then method call numbers will be printed to the terminal console.
print_entrances=0
